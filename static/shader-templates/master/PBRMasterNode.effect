// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.
CCEffect %{
  techniques:
  - name: opaque
    passes:
    - vert: pbr-vs:vert
      frag: pbr-fs
      properties: &props
        {{properties_mtl}}
  - name: transparent
    passes:
    - vert: pbr-vs:vert
      frag: pbr-fs
      depthStencilState: &d1
        depthTest: true
        depthWrite: false
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendDstAlpha: one_minus_src_alpha
      properties: *props
}%

{{chunks}}

CCProgram properties %{
  uniform ShaderGraph_Properties {
    {{properties}}
  };

  {{properties_sampler}}
}%

CCProgram pbr-vs %{
  #if USE_standard_derivatives
    #extension GL_OES_standard_derivatives : enable
  #endif

  precision highp float;
  #include <input-standard>
  #include <cc-global>
  #include <cc-local-batch>
  #include <properties>

  #include <cc-fog-vs>
  #include <cc-shadow-map-vs>

  in vec3 a_color;
  out vec3 v_color;

  out vec2 v_uv;
  in vec2 a_texCoord1;
  out vec2 v_uv1;

  {{vs_chunks}}
  {{vs_varing_define}}

  vec4 vert () {
    StandardVertInput In;
    CCVertInput(In);

    mat4 matWorld, matWorldIT;
    CCGetWorldMatrixFull(matWorld, matWorldIT);

    vec4 position = In.position;
    vec3 normal = In.normal;
    vec4 tangent = In.tangent;
    
    vec4 worldPosition = matWorld * position;
    vec4 viewPosition = cc_matView * worldPosition;

    {{vs_varing}}
    {{vs}}

    position.xyz = {{slot_Vertex_Position = position}}.xyz;
    normal.xyz   = {{slot_Vertex_Normal = normal}}.xyz;
    tangent.xyz  = {{slot_Vertex_Tangent = tangent}}.xyz;

    v_uv = a_texCoord;
    #if SAMPLE_FROM_RT
      CC_HANDLE_RT_SAMPLE_FLIP(v_uv);
    #endif

    #if HAS_SECOND_UV
      v_uv1 = a_texCoord1;
      #if SAMPLE_FROM_RT
        CC_HANDLE_RT_SAMPLE_FLIP(v_uv1);
      #endif
    #endif

    #if USE_VERTEX_COLOR
      v_color = a_color;
    #endif

    CC_TRANSFER_FOG(worldPosition);
    CC_TRANSFER_SHADOW(worldPosition);

    #if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD
      CCLightingMapCaclUV();
    #endif

    return cc_matProj * viewPosition;
  }
}%

CCProgram pbr-fs %{
  #if USE_standard_derivatives
    #extension GL_OES_standard_derivatives : enable
  #endif
  
  precision highp float;
  #include <cc-global>
  #include <properties>
  #include <cc-fog-fs>
  #include <standard-surface-entry>
  #if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD
    #include <lightingmap-fs>
  #endif

  {{fs_chunks}}
  {{fs_varing_define}}

  in vec2 v_uv;
  in vec2 v_uv1;

  void surf (out StandardSurface s) {
    {{fs_varing}}
    {{fs}}

    s.albedo.a  = {{slot_Alpha = 1.}};
    if (s.albedo.a <= {{slot_AlphaClipThreshold = 0.}}) {
      discard;
    }

    s.albedo.rgb = {{slot_Albedo = vec3(1.)}};
    s.normal    = {{slot_Normal = worldNormal}};
    s.position  = worldPosition.xyz;
    s.emissive  = {{slot_Emission = vec3(0.)}};
    s.metallic  = {{slot_Metallic = 0.6}};
    s.roughness = clamp(1. - {{slot_Smoothness = 0.4}}, 0.04, 1.0);
    s.occlusion = clamp({{slot_Occlusion = 1.}}, 0., 0.96);

    #if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD
      vec4 lightColor = texture(cc_lightingMap, v_luv.xy);
      s.lightmap = UnpackLightingmap(lightColor);
      s.lightmap_test = v_luv.z; /*u scale*/
    #endif
  }

  CC_STANDARD_SURFACE_ENTRY()
}%
