"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const base_1 = require("../../../base");
const type_1 = require("../../../type");
class PositionNode extends base_1.ShaderNode {
    constructor(data) {
        super(data);
        this.concretePrecisionType = type_1.ConcretePrecisionType.Fixed;
        if (this.data.m_Space === type_1.PositionSpace.Object - type_1.PositionSpace.Object) {
            this.depVarings.push(type_1.PositionSpace.Object);
        }
        else if (this.data.m_Space === type_1.PositionSpace.View - type_1.PositionSpace.Object) {
            this.depVarings.push(type_1.PositionSpace.View);
        }
        else if (this.data.m_Space === type_1.PositionSpace.Tangent - type_1.PositionSpace.Object) {
            console.error('Not support Tangent Position');
            this.depVarings.push(type_1.PositionSpace.Tangent);
        }
        else if (this.data.m_Space === type_1.PositionSpace.World - type_1.PositionSpace.Object) {
            this.depVarings.push(type_1.PositionSpace.World);
        }
        else if (this.data.m_Space === type_1.PositionSpace.AbsoluteWorld - type_1.PositionSpace.Object) {
            this.depVarings.push(type_1.PositionSpace.AbsoluteWorld);
        }
    }
    calcConcretePrecision() {
        this.slots.forEach(slot => {
            slot._concretePrecision = 3;
        });
    }
    generateCode() {
        let name = 'position.xyz';
        if (this.data.m_Space === type_1.PositionSpace.Object) {
            name = 'position.xyz';
        }
        else if (this.data.m_Space === type_1.PositionSpace.View) {
            name = 'viewPosition.xyz';
        }
        else if (this.data.m_Space === type_1.PositionSpace.Tangent) {
            // name = 'v_tangentPos';
            name = 'worldPosition.xyz';
        }
        else if (this.data.m_Space === type_1.PositionSpace.World) {
            name = 'worldPosition.xyz';
        }
        else if (this.data.m_Space === type_1.PositionSpace.AbsoluteWorld) {
            name = 'worldPosition.xyz';
        }
        return `${this.getOutputVarDefine(0)} = ${name};`;
    }
}
exports.default = PositionNode;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUG9zaXRpb25Ob2RlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vc291cmNlL3BhbmVsL29wZXJhdGlvbi9ub2Rlcy9pbnB1dC9nZW9tZXRyeS9Qb3NpdGlvbk5vZGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSx3Q0FBMkM7QUFDM0Msd0NBQXFFO0FBR3JFLE1BQXFCLFlBQWEsU0FBUSxpQkFBVTtJQUdoRCxZQUFhLElBQUk7UUFDYixLQUFLLENBQUMsSUFBSSxDQUFDLENBQUE7UUFIZiwwQkFBcUIsR0FBRyw0QkFBcUIsQ0FBQyxLQUFLLENBQUM7UUFLaEQsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sS0FBSyxvQkFBYSxDQUFDLE1BQU0sR0FBRyxvQkFBYSxDQUFDLE1BQU0sRUFBRTtZQUNuRSxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxvQkFBYSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQzlDO2FBQ0ksSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sS0FBSyxvQkFBYSxDQUFDLElBQUksR0FBRyxvQkFBYSxDQUFDLE1BQU0sRUFBRTtZQUN0RSxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxvQkFBYSxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQzVDO2FBQ0ksSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sS0FBSyxvQkFBYSxDQUFDLE9BQU8sR0FBRyxvQkFBYSxDQUFDLE1BQU0sRUFBRTtZQUN6RSxPQUFPLENBQUMsS0FBSyxDQUFDLDhCQUE4QixDQUFDLENBQUM7WUFDOUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsb0JBQWEsQ0FBQyxPQUFPLENBQUMsQ0FBQztTQUMvQzthQUNJLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLEtBQUssb0JBQWEsQ0FBQyxLQUFLLEdBQUcsb0JBQWEsQ0FBQyxNQUFNLEVBQUU7WUFDdkUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsb0JBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUM3QzthQUNJLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLEtBQUssb0JBQWEsQ0FBQyxhQUFhLEdBQUcsb0JBQWEsQ0FBQyxNQUFNLEVBQUU7WUFDL0UsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsb0JBQWEsQ0FBQyxhQUFhLENBQUMsQ0FBQztTQUNyRDtJQUNMLENBQUM7SUFFRCxxQkFBcUI7UUFDakIsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDdEIsSUFBSSxDQUFDLGtCQUFrQixHQUFHLENBQUMsQ0FBQztRQUNoQyxDQUFDLENBQUMsQ0FBQTtJQUNOLENBQUM7SUFFRCxZQUFZO1FBQ1IsSUFBSSxJQUFJLEdBQUcsY0FBYyxDQUFDO1FBQzFCLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLEtBQUssb0JBQWEsQ0FBQyxNQUFNLEVBQUU7WUFDNUMsSUFBSSxHQUFHLGNBQWMsQ0FBQztTQUN6QjthQUNJLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLEtBQUssb0JBQWEsQ0FBQyxJQUFJLEVBQUU7WUFDL0MsSUFBSSxHQUFHLGtCQUFrQixDQUFDO1NBQzdCO2FBQ0ksSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sS0FBSyxvQkFBYSxDQUFDLE9BQU8sRUFBRTtZQUNsRCx5QkFBeUI7WUFDekIsSUFBSSxHQUFHLG1CQUFtQixDQUFDO1NBQzlCO2FBQ0ksSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sS0FBSyxvQkFBYSxDQUFDLEtBQUssRUFBRTtZQUNoRCxJQUFJLEdBQUcsbUJBQW1CLENBQUM7U0FDOUI7YUFDSSxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxLQUFLLG9CQUFhLENBQUMsYUFBYSxFQUFFO1lBQ3hELElBQUksR0FBRyxtQkFBbUIsQ0FBQztTQUM5QjtRQUNELE9BQU8sR0FBRyxJQUFJLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxDQUFDLE1BQU0sSUFBSSxHQUFHLENBQUM7SUFDdEQsQ0FBQztDQUNKO0FBbERELCtCQWtEQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFNoYWRlck5vZGUgfSBmcm9tIFwiLi4vLi4vLi4vYmFzZVwiO1xyXG5pbXBvcnQgeyBDb25jcmV0ZVByZWNpc2lvblR5cGUsIFBvc2l0aW9uU3BhY2UgfSBmcm9tIFwiLi4vLi4vLi4vdHlwZVwiO1xyXG5cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBvc2l0aW9uTm9kZSBleHRlbmRzIFNoYWRlck5vZGUge1xyXG4gICAgY29uY3JldGVQcmVjaXNpb25UeXBlID0gQ29uY3JldGVQcmVjaXNpb25UeXBlLkZpeGVkO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yIChkYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoZGF0YSlcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuZGF0YS5tX1NwYWNlID09PSBQb3NpdGlvblNwYWNlLk9iamVjdCAtIFBvc2l0aW9uU3BhY2UuT2JqZWN0KSB7XHJcbiAgICAgICAgICAgIHRoaXMuZGVwVmFyaW5ncy5wdXNoKFBvc2l0aW9uU3BhY2UuT2JqZWN0KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAodGhpcy5kYXRhLm1fU3BhY2UgPT09IFBvc2l0aW9uU3BhY2UuVmlldyAtIFBvc2l0aW9uU3BhY2UuT2JqZWN0KSB7XHJcbiAgICAgICAgICAgIHRoaXMuZGVwVmFyaW5ncy5wdXNoKFBvc2l0aW9uU3BhY2UuVmlldyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKHRoaXMuZGF0YS5tX1NwYWNlID09PSBQb3NpdGlvblNwYWNlLlRhbmdlbnQgLSBQb3NpdGlvblNwYWNlLk9iamVjdCkge1xyXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKCdOb3Qgc3VwcG9ydCBUYW5nZW50IFBvc2l0aW9uJyk7XHJcbiAgICAgICAgICAgIHRoaXMuZGVwVmFyaW5ncy5wdXNoKFBvc2l0aW9uU3BhY2UuVGFuZ2VudCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKHRoaXMuZGF0YS5tX1NwYWNlID09PSBQb3NpdGlvblNwYWNlLldvcmxkIC0gUG9zaXRpb25TcGFjZS5PYmplY3QpIHtcclxuICAgICAgICAgICAgdGhpcy5kZXBWYXJpbmdzLnB1c2goUG9zaXRpb25TcGFjZS5Xb3JsZCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKHRoaXMuZGF0YS5tX1NwYWNlID09PSBQb3NpdGlvblNwYWNlLkFic29sdXRlV29ybGQgLSBQb3NpdGlvblNwYWNlLk9iamVjdCkge1xyXG4gICAgICAgICAgICB0aGlzLmRlcFZhcmluZ3MucHVzaChQb3NpdGlvblNwYWNlLkFic29sdXRlV29ybGQpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBjYWxjQ29uY3JldGVQcmVjaXNpb24gKCkge1xyXG4gICAgICAgIHRoaXMuc2xvdHMuZm9yRWFjaChzbG90ID0+IHtcclxuICAgICAgICAgICAgc2xvdC5fY29uY3JldGVQcmVjaXNpb24gPSAzO1xyXG4gICAgICAgIH0pXHJcbiAgICB9XHJcblxyXG4gICAgZ2VuZXJhdGVDb2RlICgpIHtcclxuICAgICAgICBsZXQgbmFtZSA9ICdwb3NpdGlvbi54eXonO1xyXG4gICAgICAgIGlmICh0aGlzLmRhdGEubV9TcGFjZSA9PT0gUG9zaXRpb25TcGFjZS5PYmplY3QpIHtcclxuICAgICAgICAgICAgbmFtZSA9ICdwb3NpdGlvbi54eXonO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICh0aGlzLmRhdGEubV9TcGFjZSA9PT0gUG9zaXRpb25TcGFjZS5WaWV3KSB7XHJcbiAgICAgICAgICAgIG5hbWUgPSAndmlld1Bvc2l0aW9uLnh5eic7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKHRoaXMuZGF0YS5tX1NwYWNlID09PSBQb3NpdGlvblNwYWNlLlRhbmdlbnQpIHtcclxuICAgICAgICAgICAgLy8gbmFtZSA9ICd2X3RhbmdlbnRQb3MnO1xyXG4gICAgICAgICAgICBuYW1lID0gJ3dvcmxkUG9zaXRpb24ueHl6JztcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAodGhpcy5kYXRhLm1fU3BhY2UgPT09IFBvc2l0aW9uU3BhY2UuV29ybGQpIHtcclxuICAgICAgICAgICAgbmFtZSA9ICd3b3JsZFBvc2l0aW9uLnh5eic7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKHRoaXMuZGF0YS5tX1NwYWNlID09PSBQb3NpdGlvblNwYWNlLkFic29sdXRlV29ybGQpIHtcclxuICAgICAgICAgICAgbmFtZSA9ICd3b3JsZFBvc2l0aW9uLnh5eic7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBgJHt0aGlzLmdldE91dHB1dFZhckRlZmluZSgwKX0gPSAke25hbWV9O2A7XHJcbiAgICB9XHJcbn1cclxuXHJcbiJdfQ==