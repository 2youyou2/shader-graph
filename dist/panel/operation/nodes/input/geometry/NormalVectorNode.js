"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const base_1 = require("../../../base");
const type_1 = require("../../../type");
class NormalVectorNode extends base_1.ShaderNode {
    constructor(data) {
        super(data);
        this.concretePrecisionType = type_1.ConcretePrecisionType.Fixed;
        if (this.data.m_Space === type_1.NormalSpace.Object - type_1.NormalSpace.Object) {
            this.depVarings.push(type_1.NormalSpace.Object);
        }
        else if (this.data.m_Space === type_1.NormalSpace.View - type_1.NormalSpace.Object) {
            this.depVarings.push(type_1.NormalSpace.View);
        }
        else if (this.data.m_Space === type_1.NormalSpace.Tangent - type_1.NormalSpace.Object) {
            this.depVarings.push(type_1.NormalSpace.Tangent);
            console.error('Not support Tangent Normal');
        }
        else if (this.data.m_Space === type_1.NormalSpace.World - type_1.NormalSpace.Object) {
            this.depVarings.push(type_1.NormalSpace.World);
        }
    }
    calcConcretePrecision() {
        this.slots.forEach(slot => {
            slot._concretePrecision = 3;
        });
    }
    generateCode() {
        let name = 'normal';
        if (this.data.m_Space === type_1.NormalSpace.Object) {
            name = 'normal';
        }
        else if (this.data.m_Space === type_1.NormalSpace.View) {
            name = 'viewNormal';
        }
        else if (this.data.m_Space === type_1.NormalSpace.Tangent) {
            // name = 'tangentNormal';
            name = 'worldNormal';
        }
        else if (this.data.m_Space === type_1.NormalSpace.World) {
            name = 'worldNormal';
        }
        return `${this.getOutputVarDefine(0)} = ${name};`;
    }
}
exports.default = NormalVectorNode;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTm9ybWFsVmVjdG9yTm9kZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3NvdXJjZS9wYW5lbC9vcGVyYXRpb24vbm9kZXMvaW5wdXQvZ2VvbWV0cnkvTm9ybWFsVmVjdG9yTm9kZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHdDQUEyQztBQUMzQyx3Q0FBbUU7QUFHbkUsTUFBcUIsZ0JBQWlCLFNBQVEsaUJBQVU7SUFHcEQsWUFBYSxJQUFJO1FBQ2IsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFBO1FBSGYsMEJBQXFCLEdBQUcsNEJBQXFCLENBQUMsS0FBSyxDQUFDO1FBS2hELElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLEtBQUssa0JBQVcsQ0FBQyxNQUFNLEdBQUcsa0JBQVcsQ0FBQyxNQUFNLEVBQUU7WUFDL0QsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsa0JBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUM1QzthQUNJLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLEtBQUssa0JBQVcsQ0FBQyxJQUFJLEdBQUcsa0JBQVcsQ0FBQyxNQUFNLEVBQUU7WUFDbEUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsa0JBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUMxQzthQUNJLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLEtBQUssa0JBQVcsQ0FBQyxPQUFPLEdBQUcsa0JBQVcsQ0FBQyxNQUFNLEVBQUU7WUFDckUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsa0JBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUMxQyxPQUFPLENBQUMsS0FBSyxDQUFDLDRCQUE0QixDQUFDLENBQUM7U0FDL0M7YUFDSSxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxLQUFLLGtCQUFXLENBQUMsS0FBSyxHQUFHLGtCQUFXLENBQUMsTUFBTSxFQUFFO1lBQ25FLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLGtCQUFXLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDM0M7SUFDTCxDQUFDO0lBRUQscUJBQXFCO1FBQ2pCLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQ3RCLElBQUksQ0FBQyxrQkFBa0IsR0FBRyxDQUFDLENBQUM7UUFDaEMsQ0FBQyxDQUFDLENBQUE7SUFDTixDQUFDO0lBRUQsWUFBWTtRQUNSLElBQUksSUFBSSxHQUFHLFFBQVEsQ0FBQztRQUNwQixJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxLQUFLLGtCQUFXLENBQUMsTUFBTSxFQUFFO1lBQzFDLElBQUksR0FBRyxRQUFRLENBQUM7U0FDbkI7YUFDSSxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxLQUFLLGtCQUFXLENBQUMsSUFBSSxFQUFFO1lBQzdDLElBQUksR0FBRyxZQUFZLENBQUM7U0FDdkI7YUFDSSxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxLQUFLLGtCQUFXLENBQUMsT0FBTyxFQUFFO1lBQ2hELDBCQUEwQjtZQUMxQixJQUFJLEdBQUcsYUFBYSxDQUFDO1NBQ3hCO2FBQ0ksSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sS0FBSyxrQkFBVyxDQUFDLEtBQUssRUFBRTtZQUM5QyxJQUFJLEdBQUcsYUFBYSxDQUFDO1NBQ3hCO1FBQ0QsT0FBTyxHQUFHLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLENBQUMsTUFBTSxJQUFJLEdBQUcsQ0FBQztJQUN0RCxDQUFDO0NBQ0o7QUE1Q0QsbUNBNENDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgU2hhZGVyTm9kZSB9IGZyb20gXCIuLi8uLi8uLi9iYXNlXCI7XHJcbmltcG9ydCB7IENvbmNyZXRlUHJlY2lzaW9uVHlwZSwgTm9ybWFsU3BhY2UgfSBmcm9tIFwiLi4vLi4vLi4vdHlwZVwiO1xyXG5cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE5vcm1hbFZlY3Rvck5vZGUgZXh0ZW5kcyBTaGFkZXJOb2RlIHtcclxuICAgIGNvbmNyZXRlUHJlY2lzaW9uVHlwZSA9IENvbmNyZXRlUHJlY2lzaW9uVHlwZS5GaXhlZDtcclxuXHJcbiAgICBjb25zdHJ1Y3RvciAoZGF0YSkge1xyXG4gICAgICAgIHN1cGVyKGRhdGEpXHJcblxyXG4gICAgICAgIGlmICh0aGlzLmRhdGEubV9TcGFjZSA9PT0gTm9ybWFsU3BhY2UuT2JqZWN0IC0gTm9ybWFsU3BhY2UuT2JqZWN0KSB7XHJcbiAgICAgICAgICAgIHRoaXMuZGVwVmFyaW5ncy5wdXNoKE5vcm1hbFNwYWNlLk9iamVjdCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKHRoaXMuZGF0YS5tX1NwYWNlID09PSBOb3JtYWxTcGFjZS5WaWV3IC0gTm9ybWFsU3BhY2UuT2JqZWN0KSB7XHJcbiAgICAgICAgICAgIHRoaXMuZGVwVmFyaW5ncy5wdXNoKE5vcm1hbFNwYWNlLlZpZXcpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICh0aGlzLmRhdGEubV9TcGFjZSA9PT0gTm9ybWFsU3BhY2UuVGFuZ2VudCAtIE5vcm1hbFNwYWNlLk9iamVjdCkge1xyXG4gICAgICAgICAgICB0aGlzLmRlcFZhcmluZ3MucHVzaChOb3JtYWxTcGFjZS5UYW5nZW50KTtcclxuICAgICAgICAgICAgY29uc29sZS5lcnJvcignTm90IHN1cHBvcnQgVGFuZ2VudCBOb3JtYWwnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAodGhpcy5kYXRhLm1fU3BhY2UgPT09IE5vcm1hbFNwYWNlLldvcmxkIC0gTm9ybWFsU3BhY2UuT2JqZWN0KSB7XHJcbiAgICAgICAgICAgIHRoaXMuZGVwVmFyaW5ncy5wdXNoKE5vcm1hbFNwYWNlLldvcmxkKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgY2FsY0NvbmNyZXRlUHJlY2lzaW9uICgpIHtcclxuICAgICAgICB0aGlzLnNsb3RzLmZvckVhY2goc2xvdCA9PiB7XHJcbiAgICAgICAgICAgIHNsb3QuX2NvbmNyZXRlUHJlY2lzaW9uID0gMztcclxuICAgICAgICB9KVxyXG4gICAgfVxyXG5cclxuICAgIGdlbmVyYXRlQ29kZSAoKSB7XHJcbiAgICAgICAgbGV0IG5hbWUgPSAnbm9ybWFsJztcclxuICAgICAgICBpZiAodGhpcy5kYXRhLm1fU3BhY2UgPT09IE5vcm1hbFNwYWNlLk9iamVjdCkge1xyXG4gICAgICAgICAgICBuYW1lID0gJ25vcm1hbCc7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKHRoaXMuZGF0YS5tX1NwYWNlID09PSBOb3JtYWxTcGFjZS5WaWV3KSB7XHJcbiAgICAgICAgICAgIG5hbWUgPSAndmlld05vcm1hbCc7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKHRoaXMuZGF0YS5tX1NwYWNlID09PSBOb3JtYWxTcGFjZS5UYW5nZW50KSB7XHJcbiAgICAgICAgICAgIC8vIG5hbWUgPSAndGFuZ2VudE5vcm1hbCc7XHJcbiAgICAgICAgICAgIG5hbWUgPSAnd29ybGROb3JtYWwnO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICh0aGlzLmRhdGEubV9TcGFjZSA9PT0gTm9ybWFsU3BhY2UuV29ybGQpIHtcclxuICAgICAgICAgICAgbmFtZSA9ICd3b3JsZE5vcm1hbCc7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBgJHt0aGlzLmdldE91dHB1dFZhckRlZmluZSgwKX0gPSAke25hbWV9O2A7XHJcbiAgICB9XHJcbn1cclxuXHJcbiJdfQ==