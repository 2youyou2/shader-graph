"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ShaderEdge = exports.ShaderEdgeSlot = exports.ShaderSlot = exports.ShaderSlotType = exports.resetGlobalShaderSlotID = exports.ShaderNode = exports.ShaderPropery = void 0;
const utils_1 = require("./utils");
const type_1 = require("./type");
class ShaderPropery {
    constructor(obj) {
        this.type = {};
        this.data = {};
        this.name = '';
        this.node = null;
        this.type = obj.type;
        this.data = utils_1.getJsonObject(obj.JSONnodeData);
        this.name = this.data.m_Name;
        this.name = this.name.replace(/ /g, '_');
    }
    get defaultValue() {
        return this.data.m_Value;
    }
    get concretePrecision() {
        return utils_1.getValueConcretePrecision(this.defaultValue);
    }
}
exports.ShaderPropery = ShaderPropery;
class ShaderNode {
    // subgraphNode: SubGraphNode | null = null;
    constructor(data) {
        this.type = {};
        this.data = {};
        this.priority = 0;
        this.uuid = '';
        this.slots = [];
        this.slotsMap = new Map;
        this.deps = [];
        this.depChunks = [];
        this.depVarings = [];
        this.isMasterNode = false;
        this.isPropertyNode = false;
        this.concretePrecisionType = type_1.ConcretePrecisionType.Min;
        this.fixedConcretePrecision = 0;
        this.type = data.typeInfo;
        this.data = utils_1.getJsonObject(data.JSONnodeData);
        this.uuid = this.data.m_GuidSerialized;
        this.slots = this.data.m_SerializableSlots.map(d => {
            let slot = new ShaderSlot(d, this);
            this.slotsMap.set(slot.id, slot);
            return slot;
        });
    }
    beforeGenreateCode() {
    }
    addDependency(dep) {
        if (dep === this) {
            return;
        }
        if (!this.deps.includes(dep)) {
            this.deps.push(dep);
        }
    }
    calcConcretePrecision() {
        if (this.fixedConcretePrecision > 0) {
            this.slots.forEach(slot => {
                slot._concretePrecision = this.fixedConcretePrecision;
            });
        }
        if (this.concretePrecisionType !== type_1.ConcretePrecisionType.Fixed) {
            let finalPrecision = 1;
            if (this.concretePrecisionType === type_1.ConcretePrecisionType.Min) {
                finalPrecision = 999;
                this.inputSlots.forEach(slot => {
                    let concretePrecision = slot.concretePrecision;
                    if (slot.connectSlot) {
                        concretePrecision = slot.connectSlot.concretePrecision;
                    }
                    finalPrecision = Math.min(finalPrecision, concretePrecision);
                });
            }
            else if (this.concretePrecisionType === type_1.ConcretePrecisionType.Max) {
                finalPrecision = -999;
                this.inputSlots.forEach(slot => {
                    let concretePrecision = slot.concretePrecision;
                    if (slot.connectSlot) {
                        concretePrecision = slot.connectSlot.concretePrecision;
                    }
                    finalPrecision = Math.max(finalPrecision, concretePrecision);
                });
            }
            else if (this.concretePrecisionType === type_1.ConcretePrecisionType.Texture) {
                finalPrecision = type_1.TextureConcretePrecision.Texture2D;
            }
            else {
                console.error('Not supported ConcretePrecisionType : ' + this.concretePrecisionType);
            }
            this.slots.forEach(slot => {
                slot._concretePrecision = finalPrecision;
            });
        }
    }
    setPriority(priority) {
        this.priority = Math.max(priority, this.priority);
        for (let i = 0; i < this.deps.length; i++) {
            this.deps[i].setPriority(this.priority + 1);
        }
    }
    get outputSlots() {
        return this.slots.filter(s => s.type === ShaderSlotType.Output);
    }
    get inputSlots() {
        return this.slots.filter(s => s.type === ShaderSlotType.Input);
    }
    getSlotWithSlotName(name) {
        return this.slots.find(s => s.displayName === name);
    }
    getOutputSlotWithSlotName(name) {
        return this.outputSlots.find(s => s.displayName === name);
    }
    getOutputVarName(idx) {
        return this.outputSlots[idx].varName;
    }
    getOutputVarDefine(idx) {
        return this.outputSlots[idx].varDefine;
    }
    getInputValue(idx) {
        return this.inputSlots[idx].slotValue;
    }
    generateCode() {
        return '';
    }
}
exports.ShaderNode = ShaderNode;
let _GlobalShaderSlotID_ = 0;
function resetGlobalShaderSlotID() {
    _GlobalShaderSlotID_ = 0;
}
exports.resetGlobalShaderSlotID = resetGlobalShaderSlotID;
var ShaderSlotType;
(function (ShaderSlotType) {
    ShaderSlotType[ShaderSlotType["Input"] = 0] = "Input";
    ShaderSlotType[ShaderSlotType["Output"] = 1] = "Output";
})(ShaderSlotType = exports.ShaderSlotType || (exports.ShaderSlotType = {}));
class ShaderSlot {
    constructor(obj, node) {
        this.typeInfo = {};
        this.data = {};
        this.id = 0;
        this.globalID = 0;
        this.displayName = '';
        this.connectSlots = [];
        this.node = undefined;
        this.type = ShaderSlotType.Input;
        this._concretePrecision = -1;
        this.typeInfo = obj.typeInfo;
        this.data = utils_1.getJsonObject(obj.JSONnodeData);
        this.type = this.data.m_SlotType;
        this.node = node;
        this.id = this.data.m_Id;
        this.globalID = _GlobalShaderSlotID_++;
        this.displayName = this.data.m_DisplayName;
    }
    get connectSlot() {
        return this.connectSlots[0];
    }
    ;
    set connectSlot(v) {
        this.connectSlots.length = 0;
        if (v) {
            this.connectSlots[0] = v;
        }
    }
    get varName() {
        var _a;
        if ((_a = this.node) === null || _a === void 0 ? void 0 : _a.isPropertyNode) {
            return this.node.property.name;
        }
        return 'var_' + this.globalID;
    }
    get varDefine() {
        let name = utils_1.getPrecisionName(this.concretePrecision);
        if (name) {
            name += ' ';
        }
        return name + this.varName;
    }
    get defaultValue() {
        let defaultValue = this.data.m_Value;
        let x = utils_1.getFloatString(defaultValue.x);
        let y = utils_1.getFloatString(defaultValue.y);
        let z = utils_1.getFloatString(defaultValue.z);
        let w = utils_1.getFloatString(defaultValue.w);
        let result = utils_1.getFloatString(defaultValue);
        if (typeof defaultValue === 'object') {
            if (defaultValue.w !== undefined) {
                result = `vec4(${x}, ${y}, ${z}, ${w})`;
            }
            else if (defaultValue.z !== undefined) {
                result = `vec3(${x}, ${y}, ${z})`;
            }
            else if (defaultValue.y !== undefined) {
                result = `vec2(${x}, ${y})`;
            }
        }
        return result;
    }
    get slotValue() {
        let valueConretePresition = this.defaultConcretePrecision;
        let selfConcretePresition = this.concretePrecision;
        let defaultValue = this.data.m_Value;
        let x = utils_1.getValueElementStr(defaultValue, 0);
        let y = utils_1.getValueElementStr(defaultValue, 1);
        let z = utils_1.getValueElementStr(defaultValue, 2);
        let w = utils_1.getValueElementStr(defaultValue, 3);
        if (typeof defaultValue !== 'object') {
            x = utils_1.getFloatString(defaultValue);
        }
        let result = '{{value}}';
        if (selfConcretePresition === 2) {
            result = `vec2({{value}})`;
        }
        else if (selfConcretePresition === 3) {
            result = `vec3({{value}})`;
        }
        else if (selfConcretePresition === 4) {
            result = `vec4({{value}})`;
        }
        let value = '';
        if (!this.connectSlot) {
            valueConretePresition = utils_1.getValueConcretePrecision(defaultValue);
            let values = [x, y, z, w];
            let concreteValues = [];
            for (let i = 0; i < selfConcretePresition; i++) {
                concreteValues.push(values[i] === undefined ? 0 : values[i]);
            }
            value = concreteValues.join(', ');
        }
        else {
            valueConretePresition = this.connectSlot.concretePrecision;
            value = this.connectSlot.varName;
            if (selfConcretePresition !== valueConretePresition) {
                if (selfConcretePresition < valueConretePresition) {
                    if (selfConcretePresition === 1) {
                        value += '.x';
                    }
                    else if (selfConcretePresition === 2) {
                        value += '.xy';
                    }
                    else if (selfConcretePresition === 3) {
                        value += '.xyz';
                    }
                }
                else {
                    if (valueConretePresition !== 1) {
                        let dif = selfConcretePresition - valueConretePresition;
                        let difValues = [];
                        for (let i = 0; i < dif; i++) {
                            difValues.push('0.');
                        }
                        value += ', ' + difValues.join(', ');
                    }
                    // if (dif === 1) {
                    //     value += `, ${x}`;
                    // }
                    // else if (dif === 2) {
                    //     value += `, ${x}, ${y}`;
                    // }
                    // else if (dif === 3) {
                    //     value += `, ${x}, ${y}, ${z}`;
                    // }
                }
            }
        }
        result = result.replace('{{value}}', value);
        return result;
    }
    get defaultConcretePrecision() {
        let concretePrecision = 1;
        let value = this.data.m_Value;
        if (typeof value === 'object') {
            if (value.w !== undefined) {
                concretePrecision = 4;
            }
            else if (value.z !== undefined) {
                concretePrecision = 3;
            }
            else if (value.y !== undefined) {
                concretePrecision = 2;
            }
        }
        return concretePrecision;
    }
    get concretePrecision() {
        var _a;
        if (this._concretePrecision === -1) {
            let value = this.data.m_Value;
            if (value === undefined) {
                if ((_a = this.node) === null || _a === void 0 ? void 0 : _a.isPropertyNode) {
                    value = this.node.property.data.m_Value;
                }
            }
            if (value === undefined) {
                console.error('Slot Value is undefined, concrete precision maybe wrong.');
            }
            this._concretePrecision = utils_1.getValueConcretePrecision(value);
        }
        return this._concretePrecision;
    }
}
exports.ShaderSlot = ShaderSlot;
class ShaderEdgeSlot {
    constructor() {
        this.id = 0;
        this.nodeUuid = '';
    }
    set(data) {
        this.id = data.m_SlotId;
        this.nodeUuid = data.m_NodeGUIDSerialized;
    }
}
exports.ShaderEdgeSlot = ShaderEdgeSlot;
class ShaderEdge {
    constructor(data) {
        this.type = {};
        this.data = {};
        this.input = new ShaderEdgeSlot;
        this.output = new ShaderEdgeSlot;
        this.type = data.typeInfo;
        this.data = utils_1.getJsonObject(data.JSONnodeData);
        this.input.set(this.data.m_InputSlot);
        this.output.set(this.data.m_OutputSlot);
    }
}
exports.ShaderEdge = ShaderEdge;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NvdXJjZS9wYW5lbC9vcGVyYXRpb24vYmFzZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxtQ0FBMEk7QUFFMUksaUNBQXlFO0FBRXpFLE1BQWEsYUFBYTtJQU90QixZQUFhLEdBQVE7UUFOckIsU0FBSSxHQUFHLEVBQUUsQ0FBQztRQUNWLFNBQUksR0FBUSxFQUFFLENBQUE7UUFFZCxTQUFJLEdBQUcsRUFBRSxDQUFDO1FBQ1YsU0FBSSxHQUFzQixJQUFJLENBQUM7UUFHM0IsSUFBSSxDQUFDLElBQUksR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFDO1FBQ3JCLElBQUksQ0FBQyxJQUFJLEdBQUcscUJBQWEsQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFDLENBQUM7UUFFNUMsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQztRQUM3QixJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUM3QyxDQUFDO0lBRUQsSUFBSSxZQUFZO1FBQ1osT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQztJQUM3QixDQUFDO0lBRUQsSUFBSSxpQkFBaUI7UUFDakIsT0FBTyxpQ0FBeUIsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7SUFDeEQsQ0FBQztDQUNKO0FBdEJELHNDQXNCQztBQUlELE1BQWEsVUFBVTtJQW1CbkIsNENBQTRDO0lBRTVDLFlBQWEsSUFBUztRQXBCdEIsU0FBSSxHQUFHLEVBQUUsQ0FBQztRQUNWLFNBQUksR0FBUSxFQUFFLENBQUE7UUFFZCxhQUFRLEdBQUcsQ0FBQyxDQUFDO1FBQ2IsU0FBSSxHQUFHLEVBQUUsQ0FBQztRQUNWLFVBQUssR0FBaUIsRUFBRSxDQUFDO1FBQ3pCLGFBQVEsR0FBNEIsSUFBSSxHQUFH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QyxJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO0lBQzVDLENBQUM7Q0FDSjtBQWRELGdDQWNDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZ2V0SnNvbk9iamVjdCwgZ2V0RmxvYXRTdHJpbmcsIGdldFZhbHVlRWxlbWVudCwgZ2V0VmFsdWVFbGVtZW50U3RyLCBnZXRWYWx1ZUNvbmNyZXRlUHJlY2lzaW9uLCBnZXRQcmVjaXNpb25OYW1lIH0gZnJvbSBcIi4vdXRpbHNcIjtcclxuaW1wb3J0IHsgcmVsYXRpdmUgfSBmcm9tIFwicGF0aFwiO1xyXG5pbXBvcnQgeyBDb25jcmV0ZVByZWNpc2lvblR5cGUsIFRleHR1cmVDb25jcmV0ZVByZWNpc2lvbiB9IGZyb20gXCIuL3R5cGVcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBTaGFkZXJQcm9wZXJ5IHtcclxuICAgIHR5cGUgPSB7fTtcclxuICAgIGRhdGE6IGFueSA9IHt9XHJcblxyXG4gICAgbmFtZSA9ICcnO1xyXG4gICAgbm9kZTogU2hhZGVyTm9kZSB8IG51bGwgPSBudWxsO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yIChvYmo6IGFueSkge1xyXG4gICAgICAgIHRoaXMudHlwZSA9IG9iai50eXBlO1xyXG4gICAgICAgIHRoaXMuZGF0YSA9IGdldEpzb25PYmplY3Qob2JqLkpTT05ub2RlRGF0YSk7XHJcblxyXG4gICAgICAgIHRoaXMubmFtZSA9IHRoaXMuZGF0YS5tX05hbWU7XHJcbiAgICAgICAgdGhpcy5uYW1lID0gdGhpcy5uYW1lLnJlcGxhY2UoLyAvZywgJ18nKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgZGVmYXVsdFZhbHVlICgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5kYXRhLm1fVmFsdWU7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IGNvbmNyZXRlUHJlY2lzaW9uICgpIHtcclxuICAgICAgICByZXR1cm4gZ2V0VmFsdWVDb25jcmV0ZVByZWNpc2lvbih0aGlzLmRlZmF1bHRWYWx1ZSk7XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG5cclxuZXhwb3J0IGNsYXNzIFNoYWRlck5vZGUge1xyXG4gICAgdHlwZSA9IHt9O1xyXG4gICAgZGF0YTogYW55ID0ge31cclxuXHJcbiAgICBwcmlvcml0eSA9IDA7XHJcbiAgICB1dWlkID0gJyc7XHJcbiAgICBzbG90czogU2hhZGVyU2xvdFtdID0gW107XHJcbiAgICBzbG90c01hcDogTWFwPG51bWJlciwgU2hhZGVyU2xvdD4gPSBuZXcgTWFwO1xyXG5cclxuICAgIGRlcHM6IFNoYWRlck5vZGVbXSA9IFtdXHJcblxyXG4gICAgZGVwQ2h1bmtzOiBzdHJpbmdbXSA9IFtdXHJcbiAgICBkZXBWYXJpbmdzOiBudW1iZXJbXSA9IFtdXHJcblxyXG4gICAgaXNNYXN0ZXJOb2RlID0gZmFsc2U7XHJcbiAgICBpc1Byb3BlcnR5Tm9kZSA9IGZhbHNlO1xyXG4gICAgY29uY3JldGVQcmVjaXNpb25UeXBlID0gQ29uY3JldGVQcmVjaXNpb25UeXBlLk1pbjtcclxuICAgIGZpeGVkQ29uY3JldGVQcmVjaXNpb24gPSAwO1xyXG5cclxuICAgIC8vIHN1YmdyYXBoTm9kZTogU3ViR3JhcGhOb2RlIHwgbnVsbCA9IG51bGw7XHJcblxyXG4gICAgY29uc3RydWN0b3IgKGRhdGE6IGFueSkge1xyXG4gICAgICAgIHRoaXMudHlwZSA9IGRhdGEudHlwZUluZm87XHJcbiAgICAgICAgdGhpcy5kYXRhID0gZ2V0SnNvbk9iamVjdChkYXRhLkpTT05ub2RlRGF0YSk7XHJcblxyXG4gICAgICAgIHRoaXMudXVpZCA9IHRoaXMuZGF0YS5tX0d1aWRTZXJpYWxpemVkO1xyXG4gICAgICAgIHRoaXMuc2xvdHMgPSB0aGlzLmRhdGEubV9TZXJpYWxpemFibGVTbG90cy5tYXAoZCA9PiB7XHJcbiAgICAgICAgICAgIGxldCBzbG90ID0gbmV3IFNoYWRlclNsb3QoZCwgdGhpcyk7XHJcbiAgICAgICAgICAgIHRoaXMuc2xvdHNNYXAuc2V0KHNsb3QuaWQsIHNsb3QpO1xyXG4gICAgICAgICAgICByZXR1cm4gc2xvdDtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgYmVmb3JlR2VucmVhdGVDb2RlICgpIHtcclxuICAgIH1cclxuXHJcbiAgICBhZGREZXBlbmRlbmN5IChkZXApIHtcclxuICAgICAgICBpZiAoZGVwID09PSB0aGlzKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCF0aGlzLmRlcHMuaW5jbHVkZXMoZGVwKSkge1xyXG4gICAgICAgICAgICB0aGlzLmRlcHMucHVzaChkZXApO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBjYWxjQ29uY3JldGVQcmVjaXNpb24gKCkge1xyXG4gICAgICAgIGlmICh0aGlzLmZpeGVkQ29uY3JldGVQcmVjaXNpb24gPiAwKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2xvdHMuZm9yRWFjaChzbG90ID0+IHtcclxuICAgICAgICAgICAgICAgIHNsb3QuX2NvbmNyZXRlUHJlY2lzaW9uID0gdGhpcy5maXhlZENvbmNyZXRlUHJlY2lzaW9uO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5jb25jcmV0ZVByZWNpc2lvblR5cGUgIT09IENvbmNyZXRlUHJlY2lzaW9uVHlwZS5GaXhlZCkge1xyXG4gICAgICAgICAgICBsZXQgZmluYWxQcmVjaXNpb246IG51bWJlciA9IDE7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmNvbmNyZXRlUHJlY2lzaW9uVHlwZSA9PT0gQ29uY3JldGVQcmVjaXNpb25UeXBlLk1pbikge1xyXG4gICAgICAgICAgICAgICAgZmluYWxQcmVjaXNpb24gPSA5OTk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmlucHV0U2xvdHMuZm9yRWFjaChzbG90ID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgY29uY3JldGVQcmVjaXNpb24gPSBzbG90LmNvbmNyZXRlUHJlY2lzaW9uO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChzbG90LmNvbm5lY3RTbG90KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbmNyZXRlUHJlY2lzaW9uID0gc2xvdC5jb25uZWN0U2xvdC5jb25jcmV0ZVByZWNpc2lvbjtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZmluYWxQcmVjaXNpb24gPSBNYXRoLm1pbihmaW5hbFByZWNpc2lvbiwgY29uY3JldGVQcmVjaXNpb24pO1xyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmICh0aGlzLmNvbmNyZXRlUHJlY2lzaW9uVHlwZSA9PT0gQ29uY3JldGVQcmVjaXNpb25UeXBlLk1heCkge1xyXG4gICAgICAgICAgICAgICAgZmluYWxQcmVjaXNpb24gPSAtOTk5O1xyXG4gICAgICAgICAgICAgICAgdGhpcy5pbnB1dFNsb3RzLmZvckVhY2goc2xvdCA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGNvbmNyZXRlUHJlY2lzaW9uID0gc2xvdC5jb25jcmV0ZVByZWNpc2lvbjtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoc2xvdC5jb25uZWN0U2xvdCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25jcmV0ZVByZWNpc2lvbiA9IHNsb3QuY29ubmVjdFNsb3QuY29uY3JldGVQcmVjaXNpb247XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGZpbmFsUHJlY2lzaW9uID0gTWF0aC5tYXgoZmluYWxQcmVjaXNpb24sIGNvbmNyZXRlUHJlY2lzaW9uKTtcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5jb25jcmV0ZVByZWNpc2lvblR5cGUgPT09IENvbmNyZXRlUHJlY2lzaW9uVHlwZS5UZXh0dXJlKSB7XHJcbiAgICAgICAgICAgICAgICBmaW5hbFByZWNpc2lvbiA9IFRleHR1cmVDb25jcmV0ZVByZWNpc2lvbi5UZXh0dXJlMkQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCdOb3Qgc3VwcG9ydGVkIENvbmNyZXRlUHJlY2lzaW9uVHlwZSA6ICcgKyB0aGlzLmNvbmNyZXRlUHJlY2lzaW9uVHlwZSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMuc2xvdHMuZm9yRWFjaChzbG90ID0+IHtcclxuICAgICAgICAgICAgICAgIHNsb3QuX2NvbmNyZXRlUHJlY2lzaW9uID0gZmluYWxQcmVjaXNpb247XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHNldFByaW9yaXR5IChwcmlvcml0eSkge1xyXG4gICAgICAgIHRoaXMucHJpb3JpdHkgPSBNYXRoLm1heChwcmlvcml0eSwgdGhpcy5wcmlvcml0eSk7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmRlcHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgdGhpcy5kZXBzW2ldLnNldFByaW9yaXR5KHRoaXMucHJpb3JpdHkgKyAxKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IG91dHB1dFNsb3RzICgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5zbG90cy5maWx0ZXIocyA9PiBzLnR5cGUgPT09IFNoYWRlclNsb3RUeXBlLk91dHB1dCk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IGlucHV0U2xvdHMgKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnNsb3RzLmZpbHRlcihzID0+IHMudHlwZSA9PT0gU2hhZGVyU2xvdFR5cGUuSW5wdXQpO1xyXG4gICAgfVxyXG5cclxuICAgIGdldFNsb3RXaXRoU2xvdE5hbWUgKG5hbWUpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5zbG90cy5maW5kKHMgPT4gcy5kaXNwbGF5TmFtZSA9PT0gbmFtZSk7XHJcbiAgICB9XHJcbiAgICBnZXRPdXRwdXRTbG90V2l0aFNsb3ROYW1lIChuYW1lKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMub3V0cHV0U2xvdHMuZmluZChzID0+IHMuZGlzcGxheU5hbWUgPT09IG5hbWUpO1xyXG4gICAgfVxyXG4gICAgZ2V0T3V0cHV0VmFyTmFtZSAoaWR4KSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMub3V0cHV0U2xvdHNbaWR4XS52YXJOYW1lO1xyXG4gICAgfVxyXG4gICAgZ2V0T3V0cHV0VmFyRGVmaW5lIChpZHgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5vdXRwdXRTbG90c1tpZHhdLnZhckRlZmluZTtcclxuICAgIH1cclxuICAgIGdldElucHV0VmFsdWUgKGlkeCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmlucHV0U2xvdHNbaWR4XS5zbG90VmFsdWU7XHJcbiAgICB9XHJcblxyXG4gICAgZ2VuZXJhdGVDb2RlICgpIHtcclxuICAgICAgICByZXR1cm4gJyc7XHJcbiAgICB9XHJcbn1cclxuXHJcbmxldCBfR2xvYmFsU2hhZGVyU2xvdElEXyA9IDA7XHJcbmV4cG9ydCBmdW5jdGlvbiByZXNldEdsb2JhbFNoYWRlclNsb3RJRCAoKSB7XHJcbiAgICBfR2xvYmFsU2hhZGVyU2xvdElEXyA9IDA7XHJcbn1cclxuXHJcbmV4cG9ydCBlbnVtIFNoYWRlclNsb3RUeXBlIHtcclxuICAgIElucHV0LFxyXG4gICAgT3V0cHV0XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBTaGFkZXJTbG90IHtcclxuICAgIHR5cGVJbmZvID0ge307XHJcbiAgICBkYXRhOiBhbnkgPSB7fVxyXG5cclxuICAgIGlkID0gMDtcclxuXHJcbiAgICBnbG9iYWxJRCA9IDA7XHJcbiAgICBkaXNwbGF5TmFtZSA9ICcnO1xyXG5cclxuICAgIGdldCBjb25uZWN0U2xvdCAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY29ubmVjdFNsb3RzWzBdO1xyXG4gICAgfTtcclxuICAgIHNldCBjb25uZWN0U2xvdCAodikge1xyXG4gICAgICAgIHRoaXMuY29ubmVjdFNsb3RzLmxlbmd0aCA9IDA7XHJcbiAgICAgICAgaWYgKHYpIHtcclxuICAgICAgICAgICAgdGhpcy5jb25uZWN0U2xvdHNbMF0gPSB2O1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGNvbm5lY3RTbG90czogU2hhZGVyU2xvdFtdID0gW107XHJcblxyXG4gICAgbm9kZTogU2hhZGVyTm9kZSB8IHVuZGVmaW5lZCA9IHVuZGVmaW5lZDtcclxuXHJcbiAgICB0eXBlID0gU2hhZGVyU2xvdFR5cGUuSW5wdXQ7XHJcblxyXG4gICAgY29uc3RydWN0b3IgKG9iajogYW55LCBub2RlOiBTaGFkZXJOb2RlKSB7XHJcbiAgICAgICAgdGhpcy50eXBlSW5mbyA9IG9iai50eXBlSW5mbztcclxuICAgICAgICB0aGlzLmRhdGEgPSBnZXRKc29uT2JqZWN0KG9iai5KU09Obm9kZURhdGEpO1xyXG5cclxuICAgICAgICB0aGlzLnR5cGUgPSB0aGlzLmRhdGEubV9TbG90VHlwZSBhcyBTaGFkZXJTbG90VHlwZTtcclxuXHJcbiAgICAgICAgdGhpcy5ub2RlID0gbm9kZTtcclxuXHJcbiAgICAgICAgdGhpcy5pZCA9IHRoaXMuZGF0YS5tX0lkO1xyXG4gICAgICAgIHRoaXMuZ2xvYmFsSUQgPSBfR2xvYmFsU2hhZGVyU2xvdElEXysrO1xyXG4gICAgICAgIHRoaXMuZGlzcGxheU5hbWUgPSB0aGlzLmRhdGEubV9EaXNwbGF5TmFtZTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgdmFyTmFtZSAoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMubm9kZT8uaXNQcm9wZXJ0eU5vZGUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMubm9kZS5wcm9wZXJ0eS5uYW1lO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gJ3Zhcl8nICsgdGhpcy5nbG9iYWxJRDtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgdmFyRGVmaW5lICgpIHtcclxuICAgICAgICBsZXQgbmFtZSA9IGdldFByZWNpc2lvbk5hbWUodGhpcy5jb25jcmV0ZVByZWNpc2lvbik7XHJcbiAgICAgICAgaWYgKG5hbWUpIHtcclxuICAgICAgICAgICAgbmFtZSArPSAnICc7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBuYW1lICsgdGhpcy52YXJOYW1lO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBkZWZhdWx0VmFsdWUgKCkge1xyXG4gICAgICAgIGxldCBkZWZhdWx0VmFsdWUgPSB0aGlzLmRhdGEubV9WYWx1ZTtcclxuXHJcbiAgICAgICAgbGV0IHggPSBnZXRGbG9hdFN0cmluZyhkZWZhdWx0VmFsdWUueCk7XHJcbiAgICAgICAgbGV0IHkgPSBnZXRGbG9hdFN0cmluZyhkZWZhdWx0VmFsdWUueSk7XHJcbiAgICAgICAgbGV0IHogPSBnZXRGbG9hdFN0cmluZyhkZWZhdWx0VmFsdWUueik7XHJcbiAgICAgICAgbGV0IHcgPSBnZXRGbG9hdFN0cmluZyhkZWZhdWx0VmFsdWUudyk7XHJcblxyXG4gICAgICAgIGxldCByZXN1bHQgPSBnZXRGbG9hdFN0cmluZyhkZWZhdWx0VmFsdWUpO1xyXG4gICAgICAgIGlmICh0eXBlb2YgZGVmYXVsdFZhbHVlID09PSAnb2JqZWN0Jykge1xyXG4gICAgICAgICAgICBpZiAoZGVmYXVsdFZhbHVlLncgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gYHZlYzQoJHt4fSwgJHt5fSwgJHt6fSwgJHt3fSlgO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKGRlZmF1bHRWYWx1ZS56ICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIHJlc3VsdCA9IGB2ZWMzKCR7eH0sICR7eX0sICR7en0pYDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChkZWZhdWx0VmFsdWUueSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICByZXN1bHQgPSBgdmVjMigke3h9LCAke3l9KWA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IHNsb3RWYWx1ZSAoKSB7XHJcbiAgICAgICAgbGV0IHZhbHVlQ29ucmV0ZVByZXNpdGlvbiA9IHRoaXMuZGVmYXVsdENvbmNyZXRlUHJlY2lzaW9uO1xyXG4gICAgICAgIGxldCBzZWxmQ29uY3JldGVQcmVzaXRpb24gPSB0aGlzLmNvbmNyZXRlUHJlY2lzaW9uO1xyXG4gICAgICAgIGxldCBkZWZhdWx0VmFsdWUgPSB0aGlzLmRhdGEubV9WYWx1ZTtcclxuXHJcbiAgICAgICAgbGV0IHggPSBnZXRWYWx1ZUVsZW1lbnRTdHIoZGVmYXVsdFZhbHVlLCAwKTtcclxuICAgICAgICBsZXQgeSA9IGdldFZhbHVlRWxlbWVudFN0cihkZWZhdWx0VmFsdWUsIDEpO1xyXG4gICAgICAgIGxldCB6ID0gZ2V0VmFsdWVFbGVtZW50U3RyKGRlZmF1bHRWYWx1ZSwgMik7XHJcbiAgICAgICAgbGV0IHcgPSBnZXRWYWx1ZUVsZW1lbnRTdHIoZGVmYXVsdFZhbHVlLCAzKTtcclxuXHJcbiAgICAgICAgaWYgKHR5cGVvZiBkZWZhdWx0VmFsdWUgIT09ICdvYmplY3QnKSB7XHJcbiAgICAgICAgICAgIHggPSBnZXRGbG9hdFN0cmluZyhkZWZhdWx0VmFsdWUpO1xyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgIGxldCByZXN1bHQgPSAne3t2YWx1ZX19JztcclxuICAgICAgICBpZiAoc2VsZkNvbmNyZXRlUHJlc2l0aW9uID09PSAyKSB7XHJcbiAgICAgICAgICAgIHJlc3VsdCA9IGB2ZWMyKHt7dmFsdWV9fSlgXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKHNlbGZDb25jcmV0ZVByZXNpdGlvbiA9PT0gMykge1xyXG4gICAgICAgICAgICByZXN1bHQgPSBgdmVjMyh7e3ZhbHVlfX0pYFxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChzZWxmQ29uY3JldGVQcmVzaXRpb24gPT09IDQpIHtcclxuICAgICAgICAgICAgcmVzdWx0ID0gYHZlYzQoe3t2YWx1ZX19KWBcclxuICAgICAgICB9XHJcbiAgICAgICAgbGV0IHZhbHVlID0gJyc7XHJcblxyXG4gICAgICAgIGlmICghdGhpcy5jb25uZWN0U2xvdCkge1xyXG4gICAgICAgICAgICB2YWx1ZUNvbnJldGVQcmVzaXRpb24gPSBnZXRWYWx1ZUNvbmNyZXRlUHJlY2lzaW9uKGRlZmF1bHRWYWx1ZSk7XHJcblxyXG4gICAgICAgICAgICBsZXQgdmFsdWVzID0gW3gsIHksIHosIHddO1xyXG4gICAgICAgICAgICBsZXQgY29uY3JldGVWYWx1ZXM6IGFueVtdID0gW107XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2VsZkNvbmNyZXRlUHJlc2l0aW9uOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGNvbmNyZXRlVmFsdWVzLnB1c2godmFsdWVzW2ldID09PSB1bmRlZmluZWQgPyAwIDogdmFsdWVzW2ldKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2YWx1ZSA9IGNvbmNyZXRlVmFsdWVzLmpvaW4oJywgJylcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHZhbHVlQ29ucmV0ZVByZXNpdGlvbiA9IHRoaXMuY29ubmVjdFNsb3QuY29uY3JldGVQcmVjaXNpb247XHJcblxyXG4gICAgICAgICAgICB2YWx1ZSA9IHRoaXMuY29ubmVjdFNsb3QudmFyTmFtZTtcclxuICAgICAgICAgICAgaWYgKHNlbGZDb25jcmV0ZVByZXNpdGlvbiAhPT0gdmFsdWVDb25yZXRlUHJlc2l0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoc2VsZkNvbmNyZXRlUHJlc2l0aW9uIDwgdmFsdWVDb25yZXRlUHJlc2l0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNlbGZDb25jcmV0ZVByZXNpdGlvbiA9PT0gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSArPSAnLngnO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChzZWxmQ29uY3JldGVQcmVzaXRpb24gPT09IDIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgKz0gJy54eSc7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHNlbGZDb25jcmV0ZVByZXNpdGlvbiA9PT0gMykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSArPSAnLnh5eic7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlQ29ucmV0ZVByZXNpdGlvbiAhPT0gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgZGlmID0gc2VsZkNvbmNyZXRlUHJlc2l0aW9uIC0gdmFsdWVDb25yZXRlUHJlc2l0aW9uO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgZGlmVmFsdWVzOiBhbnlbXSA9IFtdXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZGlmOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpZlZhbHVlcy5wdXNoKCcwLicpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlICs9ICcsICcgKyBkaWZWYWx1ZXMuam9pbignLCAnKVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAvLyBpZiAoZGlmID09PSAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgIHZhbHVlICs9IGAsICR7eH1gO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIH1cclxuICAgICAgICAgICAgICAgICAgICAvLyBlbHNlIGlmIChkaWYgPT09IDIpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgdmFsdWUgKz0gYCwgJHt4fSwgJHt5fWA7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gfVxyXG4gICAgICAgICAgICAgICAgICAgIC8vIGVsc2UgaWYgKGRpZiA9PT0gMykge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICB2YWx1ZSArPSBgLCAke3h9LCAke3l9LCAke3p9YDtcclxuICAgICAgICAgICAgICAgICAgICAvLyB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJlc3VsdCA9IHJlc3VsdC5yZXBsYWNlKCd7e3ZhbHVlfX0nLCB2YWx1ZSk7XHJcblxyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IGRlZmF1bHRDb25jcmV0ZVByZWNpc2lvbiAoKSB7XHJcbiAgICAgICAgbGV0IGNvbmNyZXRlUHJlY2lzaW9uID0gMTtcclxuXHJcbiAgICAgICAgbGV0IHZhbHVlID0gdGhpcy5kYXRhLm1fVmFsdWU7XHJcbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcpIHtcclxuICAgICAgICAgICAgaWYgKHZhbHVlLncgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgY29uY3JldGVQcmVjaXNpb24gPSA0O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKHZhbHVlLnogIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgY29uY3JldGVQcmVjaXNpb24gPSAzO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKHZhbHVlLnkgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgY29uY3JldGVQcmVjaXNpb24gPSAyO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gY29uY3JldGVQcmVjaXNpb247XHJcbiAgICB9XHJcblxyXG4gICAgX2NvbmNyZXRlUHJlY2lzaW9uID0gLTE7XHJcbiAgICBnZXQgY29uY3JldGVQcmVjaXNpb24gKCkge1xyXG4gICAgICAgIGlmICh0aGlzLl9jb25jcmV0ZVByZWNpc2lvbiA9PT0gLTEpIHtcclxuICAgICAgICAgICAgbGV0IHZhbHVlID0gdGhpcy5kYXRhLm1fVmFsdWU7XHJcbiAgICAgICAgICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5ub2RlPy5pc1Byb3BlcnR5Tm9kZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0gdGhpcy5ub2RlLnByb3BlcnR5LmRhdGEubV9WYWx1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignU2xvdCBWYWx1ZSBpcyB1bmRlZmluZWQsIGNvbmNyZXRlIHByZWNpc2lvbiBtYXliZSB3cm9uZy4nKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLl9jb25jcmV0ZVByZWNpc2lvbiA9IGdldFZhbHVlQ29uY3JldGVQcmVjaXNpb24odmFsdWUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcy5fY29uY3JldGVQcmVjaXNpb247XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBTaGFkZXJFZGdlU2xvdCB7XHJcbiAgICBpZCA9IDA7XHJcbiAgICBub2RlVXVpZCA9ICcnO1xyXG5cclxuICAgIHNldCAoZGF0YTogYW55KSB7XHJcbiAgICAgICAgdGhpcy5pZCA9IGRhdGEubV9TbG90SWQ7XHJcbiAgICAgICAgdGhpcy5ub2RlVXVpZCA9IGRhdGEubV9Ob2RlR1VJRFNlcmlhbGl6ZWQ7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBTaGFkZXJFZGdlIHtcclxuICAgIHR5cGUgPSB7fTtcclxuICAgIGRhdGE6IGFueSA9IHt9XHJcblxyXG4gICAgaW5wdXQ6IFNoYWRlckVkZ2VTbG90ID0gbmV3IFNoYWRlckVkZ2VTbG90O1xyXG4gICAgb3V0cHV0OiBTaGFkZXJFZGdlU2xvdCA9IG5ldyBTaGFkZXJFZGdlU2xvdDtcclxuXHJcbiAgICBjb25zdHJ1Y3RvciAoZGF0YTogYW55KSB7XHJcbiAgICAgICAgdGhpcy50eXBlID0gZGF0YS50eXBlSW5mbztcclxuICAgICAgICB0aGlzLmRhdGEgPSBnZXRKc29uT2JqZWN0KGRhdGEuSlNPTm5vZGVEYXRhKTtcclxuXHJcbiAgICAgICAgdGhpcy5pbnB1dC5zZXQodGhpcy5kYXRhLm1fSW5wdXRTbG90KTtcclxuICAgICAgICB0aGlzLm91dHB1dC5zZXQodGhpcy5kYXRhLm1fT3V0cHV0U2xvdCk7XHJcbiAgICB9XHJcbn0iXX0=